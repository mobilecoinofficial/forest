"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
MUST BE KEPT IN SYNC WITH RUST CODE!"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _KnownTokenId:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _KnownTokenIdEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
        _KnownTokenId.ValueType
    ],
    builtins.type,
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MOB: _KnownTokenId.ValueType  # 0

class KnownTokenId(_KnownTokenId, metaclass=_KnownTokenIdEnumTypeWrapper):
    """/////////////////////////////////////////////////////////////////////////////
    `trasaction/core` crate
    /////////////////////////////////////////////////////////////////////////////

    / A list of "known" token id's and their names.
    /
    / Note that this is not an exhaustive list and clients should gracefully handle
    / the scenario that they receive a tx out with a token id they don't know about yet.
    /
    / If changing this, please keep it in sync with the list defined in
    / mc-transaction-core in the tokens module.
    """

MOB: KnownTokenId.ValueType  # 0
global___KnownTokenId = KnownTokenId

@typing_extensions.final
class RistrettoPrivate(google.protobuf.message.Message):
    """/////////////////////////////////////////////////////////////////////////////
    `keys` crate
    /////////////////////////////////////////////////////////////////////////////

    / A Ristretto private key.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___RistrettoPrivate = RistrettoPrivate

@typing_extensions.final
class CompressedRistretto(google.protobuf.message.Message):
    """/ A 32-byte compressed Ristretto curve point (public key)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___CompressedRistretto = CompressedRistretto

@typing_extensions.final
class Ed25519Public(google.protobuf.message.Message):
    """/ An Ed25519 public key, for validating signatures."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___Ed25519Public = Ed25519Public

@typing_extensions.final
class Ed25519Signature(google.protobuf.message.Message):
    """/ An Ed25519 signature object"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___Ed25519Signature = Ed25519Signature

@typing_extensions.final
class Ed25519MultiSig(google.protobuf.message.Message):
    """/////////////////////////////////////////////////////////////////////////////
    `mc-crypto-multisig` crate
    /////////////////////////////////////////////////////////////////////////////
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNATURES_FIELD_NUMBER: builtins.int
    @property
    def signatures(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Ed25519Signature
    ]: ...
    def __init__(
        self,
        *,
        signatures: collections.abc.Iterable[global___Ed25519Signature] | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["signatures", b"signatures"]
    ) -> None: ...

global___Ed25519MultiSig = Ed25519MultiSig

@typing_extensions.final
class Ed25519SignerSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INDIVIDUAL_SIGNERS_FIELD_NUMBER: builtins.int
    MULTI_SIGNERS_FIELD_NUMBER: builtins.int
    THRESHOLD_FIELD_NUMBER: builtins.int
    @property
    def individual_signers(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Ed25519Public
    ]: ...
    @property
    def multi_signers(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Ed25519SignerSet
    ]: ...
    threshold: builtins.int
    def __init__(
        self,
        *,
        individual_signers: (
            collections.abc.Iterable[global___Ed25519Public] | None
        ) = ...,
        multi_signers: collections.abc.Iterable[global___Ed25519SignerSet] | None = ...,
        threshold: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "individual_signers",
            b"individual_signers",
            "multi_signers",
            b"multi_signers",
            "threshold",
            b"threshold",
        ],
    ) -> None: ...

global___Ed25519SignerSet = Ed25519SignerSet

@typing_extensions.final
class AccountKey(google.protobuf.message.Message):
    """/////////////////////////////////////////////////////////////////////////////
    `account-keys` crate
    /////////////////////////////////////////////////////////////////////////////

    / Complete AccountKey, containing the pair of secret keys, which can be used
    / for spending, and optionally some Fog related info that is used to form
    / public addresses for accounts that sign up with Fog service.
    /
    / This matches the Rust `transaction::AccountKey` struct.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VIEW_PRIVATE_KEY_FIELD_NUMBER: builtins.int
    SPEND_PRIVATE_KEY_FIELD_NUMBER: builtins.int
    FOG_REPORT_URL_FIELD_NUMBER: builtins.int
    FOG_REPORT_ID_FIELD_NUMBER: builtins.int
    FOG_AUTHORITY_SPKI_FIELD_NUMBER: builtins.int
    @property
    def view_private_key(self) -> global___RistrettoPrivate:
        """/ Private key 'a' used for view-key matching."""

    @property
    def spend_private_key(self) -> global___RistrettoPrivate:
        """/ Private key `b` used for spending."""
    fog_report_url: builtins.str
    """/ Optional url of fog report server.
    / Empty string when not in use, i.e. for accounts that don't have fog service.
    """
    fog_report_id: builtins.str
    """/ Optional fog report id.
    / The fog report server may serve multiple reports, this id disambiguates
    / which one to use when sending to this account.
    """
    fog_authority_spki: builtins.bytes
    """/ Optional fog authority subjectPublicKeyInfo.
    / Empty when not in use.
    """
    def __init__(
        self,
        *,
        view_private_key: global___RistrettoPrivate | None = ...,
        spend_private_key: global___RistrettoPrivate | None = ...,
        fog_report_url: builtins.str = ...,
        fog_report_id: builtins.str = ...,
        fog_authority_spki: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "spend_private_key",
            b"spend_private_key",
            "view_private_key",
            b"view_private_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fog_authority_spki",
            b"fog_authority_spki",
            "fog_report_id",
            b"fog_report_id",
            "fog_report_url",
            b"fog_report_url",
            "spend_private_key",
            b"spend_private_key",
            "view_private_key",
            b"view_private_key",
        ],
    ) -> None: ...

global___AccountKey = AccountKey

@typing_extensions.final
class PublicAddress(google.protobuf.message.Message):
    """/ A public address, used to identify recipients."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VIEW_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    SPEND_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    FOG_REPORT_URL_FIELD_NUMBER: builtins.int
    FOG_REPORT_ID_FIELD_NUMBER: builtins.int
    FOG_AUTHORITY_SIG_FIELD_NUMBER: builtins.int
    @property
    def view_public_key(self) -> global___CompressedRistretto:
        """/ View public key"""

    @property
    def spend_public_key(self) -> global___CompressedRistretto:
        """/ Spend public key"""
    fog_report_url: builtins.str
    """/ Optional url of fog report server.
    / Empty string when not in use, i.e. for accounts that don't have fog service.
    / Indicates the place at which the fog report server should be contacted.
    """
    fog_report_id: builtins.str
    """/ Optional fog report id.
    / The fog report server may serve multiple reports, this id disambiguates
    / which one to use when sending to this account.
    """
    fog_authority_sig: builtins.bytes
    """/ View key signature over the fog authority subjectPublicKeyInfo.
    /
    / This must be parseable as a RistrettoSignature.
    """
    def __init__(
        self,
        *,
        view_public_key: global___CompressedRistretto | None = ...,
        spend_public_key: global___CompressedRistretto | None = ...,
        fog_report_url: builtins.str = ...,
        fog_report_id: builtins.str = ...,
        fog_authority_sig: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "spend_public_key",
            b"spend_public_key",
            "view_public_key",
            b"view_public_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fog_authority_sig",
            b"fog_authority_sig",
            "fog_report_id",
            b"fog_report_id",
            "fog_report_url",
            b"fog_report_url",
            "spend_public_key",
            b"spend_public_key",
            "view_public_key",
            b"view_public_key",
        ],
    ) -> None: ...

global___PublicAddress = PublicAddress

@typing_extensions.final
class RootIdentity(google.protobuf.message.Message):
    """/ A KDF can be used to stretch a 32 byte secret into multiple secret private keys.
    / The RootIdentity is a compact form of a user's account key, if it has been
    / derived in this way. This may be useful for e.g. paper wallets.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ROOT_ENTROPY_FIELD_NUMBER: builtins.int
    FOG_REPORT_URL_FIELD_NUMBER: builtins.int
    FOG_REPORT_ID_FIELD_NUMBER: builtins.int
    FOG_AUTHORITY_SPKI_FIELD_NUMBER: builtins.int
    @property
    def root_entropy(self) -> global___RootEntropy:
        """/ The root entropy used to derive cryptonote private keys for this account"""
    fog_report_url: builtins.str
    """/ Optional url of fog report server, same as in AccountKey"""
    fog_report_id: builtins.str
    """/ Optional fog report id, same as in AccountKey"""
    fog_authority_spki: builtins.bytes
    """/ Optional fog authority subjectPublicKeyInfo.
    / Empty when not in use.
    """
    def __init__(
        self,
        *,
        root_entropy: global___RootEntropy | None = ...,
        fog_report_url: builtins.str = ...,
        fog_report_id: builtins.str = ...,
        fog_authority_spki: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["root_entropy", b"root_entropy"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fog_authority_spki",
            b"fog_authority_spki",
            "fog_report_id",
            b"fog_report_id",
            "fog_report_url",
            b"fog_report_url",
            "root_entropy",
            b"root_entropy",
        ],
    ) -> None: ...

global___RootIdentity = RootIdentity

@typing_extensions.final
class RootEntropy(google.protobuf.message.Message):
    """/ A 32 byte secret used as input key material to derive private keys"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___RootEntropy = RootEntropy

@typing_extensions.final
class CurveScalar(google.protobuf.message.Message):
    """/ A 32-byte scalar associated to the ristretto group.
    / This is the same as RistrettoPrivate, but they are used in different places.
    / TODO: MC-1605 Consider to factor out this type, or just this proto message.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___CurveScalar = CurveScalar

@typing_extensions.final
class KeyImage(google.protobuf.message.Message):
    """/ A 32-byte mobilecoin transaction key image."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___KeyImage = KeyImage

@typing_extensions.final
class Range(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FROM_FIELD_NUMBER: builtins.int
    TO_FIELD_NUMBER: builtins.int
    to: builtins.int
    def __init__(
        self,
        *,
        to: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["from", b"from", "to", b"to"]
    ) -> None: ...

global___Range = Range

@typing_extensions.final
class TxOutMembershipHash(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___TxOutMembershipHash = TxOutMembershipHash

@typing_extensions.final
class TxOutMembershipElement(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RANGE_FIELD_NUMBER: builtins.int
    HASH_FIELD_NUMBER: builtins.int
    @property
    def range(self) -> global___Range: ...
    @property
    def hash(self) -> global___TxOutMembershipHash: ...
    def __init__(
        self,
        *,
        range: global___Range | None = ...,
        hash: global___TxOutMembershipHash | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["hash", b"hash", "range", b"range"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["hash", b"hash", "range", b"range"]
    ) -> None: ...

global___TxOutMembershipElement = TxOutMembershipElement

@typing_extensions.final
class TxOutMembershipProof(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INDEX_FIELD_NUMBER: builtins.int
    HIGHEST_INDEX_FIELD_NUMBER: builtins.int
    ELEMENTS_FIELD_NUMBER: builtins.int
    index: builtins.int
    highest_index: builtins.int
    @property
    def elements(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOutMembershipElement
    ]: ...
    def __init__(
        self,
        *,
        index: builtins.int = ...,
        highest_index: builtins.int = ...,
        elements: (
            collections.abc.Iterable[global___TxOutMembershipElement] | None
        ) = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "elements",
            b"elements",
            "highest_index",
            b"highest_index",
            "index",
            b"index",
        ],
    ) -> None: ...

global___TxOutMembershipProof = TxOutMembershipProof

@typing_extensions.final
class TxOutConfirmationNumber(google.protobuf.message.Message):
    """A hash of the shared secret of a transaction output.

    Can be used by the recipient of a transaction output to verify that the
    bearer of this number knew the shared secret of the transaction output,
    thereby providing evidence that they are the sender.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HASH_FIELD_NUMBER: builtins.int
    hash: builtins.bytes
    def __init__(
        self,
        *,
        hash: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["hash", b"hash"]
    ) -> None: ...

global___TxOutConfirmationNumber = TxOutConfirmationNumber

@typing_extensions.final
class MaskedAmount(google.protobuf.message.Message):
    """MaskedAmount."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMITMENT_FIELD_NUMBER: builtins.int
    MASKED_VALUE_FIELD_NUMBER: builtins.int
    MASKED_TOKEN_ID_FIELD_NUMBER: builtins.int
    @property
    def commitment(self) -> global___CompressedRistretto:
        """A Pedersen commitment `v*G + s*H`"""
    masked_value: builtins.int
    """`masked_value = value XOR_8 Blake2B("value_mask" || shared_secret)`"""
    masked_token_id: builtins.bytes
    """`masked_token_id = token_id XOR_8 Blake2B("token_id_mask" || shared_secret)`"""
    def __init__(
        self,
        *,
        commitment: global___CompressedRistretto | None = ...,
        masked_value: builtins.int = ...,
        masked_token_id: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["commitment", b"commitment"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "commitment",
            b"commitment",
            "masked_token_id",
            b"masked_token_id",
            "masked_value",
            b"masked_value",
        ],
    ) -> None: ...

global___MaskedAmount = MaskedAmount

@typing_extensions.final
class EncryptedFogHint(google.protobuf.message.Message):
    """The bytes of encrypted fog hint"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___EncryptedFogHint = EncryptedFogHint

@typing_extensions.final
class EncryptedMemo(google.protobuf.message.Message):
    """The bytes of encrypted memo"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    data: builtins.bytes
    def __init__(
        self,
        *,
        data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["data", b"data"]
    ) -> None: ...

global___EncryptedMemo = EncryptedMemo

@typing_extensions.final
class TxOut(google.protobuf.message.Message):
    """A Transaction Output."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MASKED_AMOUNT_V1_FIELD_NUMBER: builtins.int
    MASKED_AMOUNT_V2_FIELD_NUMBER: builtins.int
    TARGET_KEY_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    E_FOG_HINT_FIELD_NUMBER: builtins.int
    E_MEMO_FIELD_NUMBER: builtins.int
    @property
    def masked_amount_v1(self) -> global___MaskedAmount: ...
    @property
    def masked_amount_v2(self) -> global___MaskedAmount: ...
    @property
    def target_key(self) -> global___CompressedRistretto:
        """Public key."""

    @property
    def public_key(self) -> global___CompressedRistretto:
        """Public key."""

    @property
    def e_fog_hint(self) -> global___EncryptedFogHint:
        """Encrypted fog hint payload.
        This is an mc-crypto-box cryptogram for the fog ingest server,
        or a random cryptogram indistinguishable from a real one.
        """

    @property
    def e_memo(self) -> global___EncryptedMemo:
        """Encrypted memo"""

    def __init__(
        self,
        *,
        masked_amount_v1: global___MaskedAmount | None = ...,
        masked_amount_v2: global___MaskedAmount | None = ...,
        target_key: global___CompressedRistretto | None = ...,
        public_key: global___CompressedRistretto | None = ...,
        e_fog_hint: global___EncryptedFogHint | None = ...,
        e_memo: global___EncryptedMemo | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "e_fog_hint",
            b"e_fog_hint",
            "e_memo",
            b"e_memo",
            "masked_amount",
            b"masked_amount",
            "masked_amount_v1",
            b"masked_amount_v1",
            "masked_amount_v2",
            b"masked_amount_v2",
            "public_key",
            b"public_key",
            "target_key",
            b"target_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "e_fog_hint",
            b"e_fog_hint",
            "e_memo",
            b"e_memo",
            "masked_amount",
            b"masked_amount",
            "masked_amount_v1",
            b"masked_amount_v1",
            "masked_amount_v2",
            b"masked_amount_v2",
            "public_key",
            b"public_key",
            "target_key",
            b"target_key",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["masked_amount", b"masked_amount"]
    ) -> typing_extensions.Literal["masked_amount_v1", "masked_amount_v2"] | None: ...

global___TxOut = TxOut

@typing_extensions.final
class TxIn(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RING_FIELD_NUMBER: builtins.int
    PROOFS_FIELD_NUMBER: builtins.int
    INPUT_RULES_FIELD_NUMBER: builtins.int
    @property
    def ring(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOut
    ]:
        """ "Ring" of inputs, one of which is actually being spent."""

    @property
    def proofs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOutMembershipProof
    ]:
        """Proof that each TxOut in `ring` is in the ledger."""

    @property
    def input_rules(self) -> global___InputRules:
        """Any rules specified by the signed input"""

    def __init__(
        self,
        *,
        ring: collections.abc.Iterable[global___TxOut] | None = ...,
        proofs: collections.abc.Iterable[global___TxOutMembershipProof] | None = ...,
        input_rules: global___InputRules | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["input_rules", b"input_rules"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "input_rules", b"input_rules", "proofs", b"proofs", "ring", b"ring"
        ],
    ) -> None: ...

global___TxIn = TxIn

@typing_extensions.final
class InputRules(google.protobuf.message.Message):
    """Rules enforced on a transaction by a signed input within it (MCIP #31)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUIRED_OUTPUTS_FIELD_NUMBER: builtins.int
    MAX_TOMBSTONE_BLOCK_FIELD_NUMBER: builtins.int
    PARTIAL_FILL_OUTPUTS_FIELD_NUMBER: builtins.int
    PARTIAL_FILL_CHANGE_FIELD_NUMBER: builtins.int
    MIN_PARTIAL_FILL_VALUE_FIELD_NUMBER: builtins.int
    @property
    def required_outputs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOut
    ]:
        """Outputs required to appear in the TxPrefix for the Tx to be valid"""
    max_tombstone_block: builtins.int
    """A maximum value which the tombstone block for the Tx cannot exceed

    A value of zero here means no limit is enforced
    """
    @property
    def partial_fill_outputs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___RevealedTxOut
    ]:
        """Outputs required to appear in the TxPrefix, but which are permitted to be
        filled partially instead of fully, according to the "fill fraction" which
        is inferred using the "partial fill change" output (MCIP #42)
        """

    @property
    def partial_fill_change(self) -> global___RevealedTxOut:
        """A change output for any leftover from this input, which may occur during
        a partial fill (MCIP #42).

        This field must be present whenever partial fills are used, because the
        comparison of this "idealized" output and the corresponding "fractional"
        change which appears in the TxPrefix is what determines the "fill fraction",
        that is, the degree to which a counterparty is obliged to fill every
        partial fill output in these rules.

        It is an error to use any of the partial fill options without also
        setting this.
        """
    min_partial_fill_value: builtins.int
    """A minimum fill value for the partial fill rules. (MCIP #42)
    A counterparty who fills an SCI must keep at least this much of the offer
    and can't return all of it as change if this is set.
    This can be used to prevent griefing where someone fills your offer in exchange
    for dust.
    This minimum has no effect if set to 0.
    """
    def __init__(
        self,
        *,
        required_outputs: collections.abc.Iterable[global___TxOut] | None = ...,
        max_tombstone_block: builtins.int = ...,
        partial_fill_outputs: (
            collections.abc.Iterable[global___RevealedTxOut] | None
        ) = ...,
        partial_fill_change: global___RevealedTxOut | None = ...,
        min_partial_fill_value: builtins.int = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "partial_fill_change", b"partial_fill_change"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "max_tombstone_block",
            b"max_tombstone_block",
            "min_partial_fill_value",
            b"min_partial_fill_value",
            "partial_fill_change",
            b"partial_fill_change",
            "partial_fill_outputs",
            b"partial_fill_outputs",
            "required_outputs",
            b"required_outputs",
        ],
    ) -> None: ...

global___InputRules = InputRules

@typing_extensions.final
class RevealedTxOut(google.protobuf.message.Message):
    """A TxOut together with its amount shared secret. This is sometimes needed to
    properly validate partial fill transactions (MCIP #42).
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TX_OUT_FIELD_NUMBER: builtins.int
    AMOUNT_SHARED_SECRET_FIELD_NUMBER: builtins.int
    @property
    def tx_out(self) -> global___TxOut:
        """The TxOut"""
    amount_shared_secret: builtins.bytes
    """Amount shared secret. This can be used to see the masked value and token id
    and confirm that they match the amount commitment.

    This must be exactly 32 bytes, and should be derived from TxOut shared secret
    using domain-separated SHA512 as in transaction-core.
    """
    def __init__(
        self,
        *,
        tx_out: global___TxOut | None = ...,
        amount_shared_secret: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["tx_out", b"tx_out"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "amount_shared_secret", b"amount_shared_secret", "tx_out", b"tx_out"
        ],
    ) -> None: ...

global___RevealedTxOut = RevealedTxOut

@typing_extensions.final
class TxPrefix(google.protobuf.message.Message):
    """A transaction that a client submits to consensus"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    FEE_FIELD_NUMBER: builtins.int
    TOMBSTONE_BLOCK_FIELD_NUMBER: builtins.int
    FEE_TOKEN_ID_FIELD_NUMBER: builtins.int
    @property
    def inputs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxIn
    ]:
        """Transaction inputs."""

    @property
    def outputs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOut
    ]:
        """Transaction outputs."""
    fee: builtins.int
    """Fee paid to the foundation for this transaction"""
    tombstone_block: builtins.int
    """The block index at which this transaction is no longer valid."""
    fee_token_id: builtins.int
    """Token id for the fee of this transaction"""
    def __init__(
        self,
        *,
        inputs: collections.abc.Iterable[global___TxIn] | None = ...,
        outputs: collections.abc.Iterable[global___TxOut] | None = ...,
        fee: builtins.int = ...,
        tombstone_block: builtins.int = ...,
        fee_token_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fee",
            b"fee",
            "fee_token_id",
            b"fee_token_id",
            "inputs",
            b"inputs",
            "outputs",
            b"outputs",
            "tombstone_block",
            b"tombstone_block",
        ],
    ) -> None: ...

global___TxPrefix = TxPrefix

@typing_extensions.final
class RingMLSAG(google.protobuf.message.Message):
    """A ring mlsag is a group-ring signature conferring spending authority of one TxOut
    which is part of a TxIn.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    C_ZERO_FIELD_NUMBER: builtins.int
    RESPONSES_FIELD_NUMBER: builtins.int
    KEY_IMAGE_FIELD_NUMBER: builtins.int
    @property
    def c_zero(self) -> global___CurveScalar:
        """The initial challenge value for the ring signature"""

    @property
    def responses(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___CurveScalar
    ]:
        """The "responses", one for each input which is signed"""

    @property
    def key_image(self) -> global___KeyImage:
        """The key image is a hash unique to the "true" spent input. This cannot
        be linked back to determine the true spent input, but the input cannot be
        spent again without producing the same key image value, so this is used to
        prevent double-spends.
        """

    def __init__(
        self,
        *,
        c_zero: global___CurveScalar | None = ...,
        responses: collections.abc.Iterable[global___CurveScalar] | None = ...,
        key_image: global___KeyImage | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "c_zero", b"c_zero", "key_image", b"key_image"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "c_zero", b"c_zero", "key_image", b"key_image", "responses", b"responses"
        ],
    ) -> None: ...

global___RingMLSAG = RingMLSAG

@typing_extensions.final
class SignatureRctBulletproofs(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RING_SIGNATURES_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_COMMITMENTS_FIELD_NUMBER: builtins.int
    RANGE_PROOF_BYTES_FIELD_NUMBER: builtins.int
    RANGE_PROOFS_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_TOKEN_IDS_FIELD_NUMBER: builtins.int
    OUTPUT_TOKEN_IDS_FIELD_NUMBER: builtins.int
    @property
    def ring_signatures(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___RingMLSAG
    ]:
        """A ring-signature, one for each TxIn, producing one pseudo-output and key image."""

    @property
    def pseudo_output_commitments(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___CompressedRistretto
    ]:
        """The amount commitments for each pseudo-output.
        There must be one of these for each TxIn.
        """
    range_proof_bytes: builtins.bytes
    """Before mixed transactions feature, there is one range proof for all pseudo-output
    and output commitments, whose serialized bytes appear here.
    After mixed transactions feature, this field is empty.
    """
    @property
    def range_proofs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.bytes
    ]:
        """Before mixed transactions feature, this field is empty.
        After mixed transactions feature, this field contains one range proof for each
        token id which appears in the transaction, in sorted order of token ids.
        It range-proofs the pseudo-outputs and outputs with that token id, in the order
        that they appear in the transaction.
        """

    @property
    def pseudo_output_token_ids(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The token ids of each pseudo ouptut. There must be one of these for each TxIn.
        Before mixed transactions feature, this field is empty, and the token ids of
        all pseudo-outputs are inferred from the tx.prefix.fee_token_id.
        """

    @property
    def output_token_ids(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The token ids of each output. There must be one of these for each output of the Tx.
        (tx.prefix.outputs).
        Before mixed transactions feature, this field is empty, and the token ids of
        all outputs are inferred from the tx.prefix.fee_token_id.
        """

    def __init__(
        self,
        *,
        ring_signatures: collections.abc.Iterable[global___RingMLSAG] | None = ...,
        pseudo_output_commitments: (
            collections.abc.Iterable[global___CompressedRistretto] | None
        ) = ...,
        range_proof_bytes: builtins.bytes = ...,
        range_proofs: collections.abc.Iterable[builtins.bytes] | None = ...,
        pseudo_output_token_ids: collections.abc.Iterable[builtins.int] | None = ...,
        output_token_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "output_token_ids",
            b"output_token_ids",
            "pseudo_output_commitments",
            b"pseudo_output_commitments",
            "pseudo_output_token_ids",
            b"pseudo_output_token_ids",
            "range_proof_bytes",
            b"range_proof_bytes",
            "range_proofs",
            b"range_proofs",
            "ring_signatures",
            b"ring_signatures",
        ],
    ) -> None: ...

global___SignatureRctBulletproofs = SignatureRctBulletproofs

@typing_extensions.final
class Tx(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PREFIX_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    FEE_MAP_DIGEST_FIELD_NUMBER: builtins.int
    @property
    def prefix(self) -> global___TxPrefix:
        """The actual contents of the transaction."""

    @property
    def signature(self) -> global___SignatureRctBulletproofs:
        """The RingCT signature on the prefix."""
    fee_map_digest: builtins.bytes
    """Client's belief about the minimum fee map, expressed as a merlin digest.

    The enclave must reject the proposal if this doesn't match the enclave's
    belief, to protect the client from information disclosure attacks.
    (This is TOB-MCCT-5)
    """
    def __init__(
        self,
        *,
        prefix: global___TxPrefix | None = ...,
        signature: global___SignatureRctBulletproofs | None = ...,
        fee_map_digest: builtins.bytes = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "prefix", b"prefix", "signature", b"signature"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "fee_map_digest",
            b"fee_map_digest",
            "prefix",
            b"prefix",
            "signature",
            b"signature",
        ],
    ) -> None: ...

global___Tx = Tx

@typing_extensions.final
class TxHash(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HASH_FIELD_NUMBER: builtins.int
    hash: builtins.bytes
    """Hash of a single transaction."""
    def __init__(
        self,
        *,
        hash: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["hash", b"hash"]
    ) -> None: ...

global___TxHash = TxHash

@typing_extensions.final
class Receipt(google.protobuf.message.Message):
    """Given to the recipient of a transaction output by the sender so that the
    recipient may verify that the other party is indeed the sender.

    Often given to the recipient before the transaction is finalized so that
    the recipient may know to anticipate the arrival of a transaction output,
    as well as know who it's from, when to consider it as having surpassed
    the tombstone block, and the expected amount of the output.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    CONFIRMATION_FIELD_NUMBER: builtins.int
    TOMBSTONE_BLOCK_FIELD_NUMBER: builtins.int
    MASKED_AMOUNT_V1_FIELD_NUMBER: builtins.int
    MASKED_AMOUNT_V2_FIELD_NUMBER: builtins.int
    @property
    def public_key(self) -> global___CompressedRistretto:
        """Public key of the TxOut."""

    @property
    def confirmation(self) -> global___TxOutConfirmationNumber:
        """Confirmation number of the TxOut."""
    tombstone_block: builtins.int
    """Tombstone block of the Tx that produced the TxOut.
    Note: This value is self-reported by the sender and is unverifiable.
    """
    @property
    def masked_amount_v1(self) -> global___MaskedAmount: ...
    @property
    def masked_amount_v2(self) -> global___MaskedAmount: ...
    def __init__(
        self,
        *,
        public_key: global___CompressedRistretto | None = ...,
        confirmation: global___TxOutConfirmationNumber | None = ...,
        tombstone_block: builtins.int = ...,
        masked_amount_v1: global___MaskedAmount | None = ...,
        masked_amount_v2: global___MaskedAmount | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "confirmation",
            b"confirmation",
            "masked_amount",
            b"masked_amount",
            "masked_amount_v1",
            b"masked_amount_v1",
            "masked_amount_v2",
            b"masked_amount_v2",
            "public_key",
            b"public_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "confirmation",
            b"confirmation",
            "masked_amount",
            b"masked_amount",
            "masked_amount_v1",
            b"masked_amount_v1",
            "masked_amount_v2",
            b"masked_amount_v2",
            "public_key",
            b"public_key",
            "tombstone_block",
            b"tombstone_block",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["masked_amount", b"masked_amount"]
    ) -> typing_extensions.Literal["masked_amount_v1", "masked_amount_v2"] | None: ...

global___Receipt = Receipt

@typing_extensions.final
class VerificationSignature(google.protobuf.message.Message):
    """/ The signature over an IAS JSON reponse, created by Intel"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTENTS_FIELD_NUMBER: builtins.int
    contents: builtins.bytes
    def __init__(
        self,
        *,
        contents: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["contents", b"contents"]
    ) -> None: ...

global___VerificationSignature = VerificationSignature

@typing_extensions.final
class VerificationReport(google.protobuf.message.Message):
    """/ The IAS verification report response encoded as a protocol buffer"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIG_FIELD_NUMBER: builtins.int
    CHAIN_FIELD_NUMBER: builtins.int
    HTTP_BODY_FIELD_NUMBER: builtins.int
    @property
    def sig(self) -> global___VerificationSignature:
        """/ The IAS-generated signature over the response string"""

    @property
    def chain(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.bytes
    ]:
        """/ A list of byte strings representing the DER-encoded certificate
        / chain provided by IAS.
        """
    http_body: builtins.str
    """/ The raw report body JSON, as a byte sequence"""
    def __init__(
        self,
        *,
        sig: global___VerificationSignature | None = ...,
        chain: collections.abc.Iterable[builtins.bytes] | None = ...,
        http_body: builtins.str = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["sig", b"sig"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "chain", b"chain", "http_body", b"http_body", "sig", b"sig"
        ],
    ) -> None: ...

global___VerificationReport = VerificationReport

@typing_extensions.final
class MintTxPrefix(google.protobuf.message.Message):
    """/ The contents of a mint-tx, which is a transaction to mint new tokens."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOKEN_ID_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    VIEW_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    SPEND_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    NONCE_FIELD_NUMBER: builtins.int
    TOMBSTONE_BLOCK_FIELD_NUMBER: builtins.int
    E_FOG_HINT_FIELD_NUMBER: builtins.int
    token_id: builtins.int
    """/ Token ID we are minting."""
    amount: builtins.int
    """/ Amount we are minting."""
    @property
    def view_public_key(self) -> global___CompressedRistretto:
        """/ The destination's public subaddress view key 'C'."""

    @property
    def spend_public_key(self) -> global___CompressedRistretto:
        """/ The destination's public subaddress spend key `D`."""
    nonce: builtins.bytes
    """/ Nonce, to prevent replay attacks.
    / Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
    """
    tombstone_block: builtins.int
    """/ The block index at which this transaction is no longer valid."""
    @property
    def e_fog_hint(self) -> global___EncryptedFogHint:
        """/ The (optional) encrypted fog hint of the minted TxOut."""

    def __init__(
        self,
        *,
        token_id: builtins.int = ...,
        amount: builtins.int = ...,
        view_public_key: global___CompressedRistretto | None = ...,
        spend_public_key: global___CompressedRistretto | None = ...,
        nonce: builtins.bytes = ...,
        tombstone_block: builtins.int = ...,
        e_fog_hint: global___EncryptedFogHint | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "e_fog_hint",
            b"e_fog_hint",
            "spend_public_key",
            b"spend_public_key",
            "view_public_key",
            b"view_public_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "amount",
            b"amount",
            "e_fog_hint",
            b"e_fog_hint",
            "nonce",
            b"nonce",
            "spend_public_key",
            b"spend_public_key",
            "token_id",
            b"token_id",
            "tombstone_block",
            b"tombstone_block",
            "view_public_key",
            b"view_public_key",
        ],
    ) -> None: ...

global___MintTxPrefix = MintTxPrefix

@typing_extensions.final
class MintTx(google.protobuf.message.Message):
    """/ A mint transaction coupled with a signature over it."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PREFIX_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    @property
    def prefix(self) -> global___MintTxPrefix: ...
    @property
    def signature(self) -> global___Ed25519MultiSig: ...
    def __init__(
        self,
        *,
        prefix: global___MintTxPrefix | None = ...,
        signature: global___Ed25519MultiSig | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "prefix", b"prefix", "signature", b"signature"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "prefix", b"prefix", "signature", b"signature"
        ],
    ) -> None: ...

global___MintTx = MintTx

@typing_extensions.final
class MintConfig(google.protobuf.message.Message):
    """/ A minting configuration for a single token ID.
    / The minting configuration specifies who is allowed to submit mint
    / transactions, for which token and at what total limit.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOKEN_ID_FIELD_NUMBER: builtins.int
    SIGNER_SET_FIELD_NUMBER: builtins.int
    MINT_LIMIT_FIELD_NUMBER: builtins.int
    token_id: builtins.int
    """/ Token ID this configuration applies to."""
    @property
    def signer_set(self) -> global___Ed25519SignerSet:
        """/ The set of keys that can sign a minting transaction."""
    mint_limit: builtins.int
    """/ The maximal amount this configuration can mint from the moment it has
    / been applied.
    """
    def __init__(
        self,
        *,
        token_id: builtins.int = ...,
        signer_set: global___Ed25519SignerSet | None = ...,
        mint_limit: builtins.int = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["signer_set", b"signer_set"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "mint_limit",
            b"mint_limit",
            "signer_set",
            b"signer_set",
            "token_id",
            b"token_id",
        ],
    ) -> None: ...

global___MintConfig = MintConfig

@typing_extensions.final
class MintConfigTxPrefix(google.protobuf.message.Message):
    """/ The contents of a mint-config transaction. This transaction alters the
    / minting configuration for a single token ID.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOKEN_ID_FIELD_NUMBER: builtins.int
    CONFIGS_FIELD_NUMBER: builtins.int
    NONCE_FIELD_NUMBER: builtins.int
    TOMBSTONE_BLOCK_FIELD_NUMBER: builtins.int
    TOTAL_MINT_LIMIT_FIELD_NUMBER: builtins.int
    token_id: builtins.int
    """/ Token ID we are replacing the configuration set for."""
    @property
    def configs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___MintConfig
    ]:
        """/ The new configuration."""
    nonce: builtins.bytes
    """/ Nonce, to prevent replay attacks.
    / Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
    """
    tombstone_block: builtins.int
    """/ The block index at which this transaction is no longer valid."""
    total_mint_limit: builtins.int
    """/ The maximal amount that can be minted by configurations specified in
    / this tx. This amount is shared amongst all configs.
    """
    def __init__(
        self,
        *,
        token_id: builtins.int = ...,
        configs: collections.abc.Iterable[global___MintConfig] | None = ...,
        nonce: builtins.bytes = ...,
        tombstone_block: builtins.int = ...,
        total_mint_limit: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "configs",
            b"configs",
            "nonce",
            b"nonce",
            "token_id",
            b"token_id",
            "tombstone_block",
            b"tombstone_block",
            "total_mint_limit",
            b"total_mint_limit",
        ],
    ) -> None: ...

global___MintConfigTxPrefix = MintConfigTxPrefix

@typing_extensions.final
class MintConfigTx(google.protobuf.message.Message):
    """/ A mint-config transaction coupled with a signature over it."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PREFIX_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    @property
    def prefix(self) -> global___MintConfigTxPrefix: ...
    @property
    def signature(self) -> global___Ed25519MultiSig: ...
    def __init__(
        self,
        *,
        prefix: global___MintConfigTxPrefix | None = ...,
        signature: global___Ed25519MultiSig | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "prefix", b"prefix", "signature", b"signature"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "prefix", b"prefix", "signature", b"signature"
        ],
    ) -> None: ...

global___MintConfigTx = MintConfigTx

@typing_extensions.final
class ValidatedMintConfigTx(google.protobuf.message.Message):
    """/ A mint-config transaction coupled with the data used to validate it."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MINT_CONFIG_TX_FIELD_NUMBER: builtins.int
    SIGNER_SET_FIELD_NUMBER: builtins.int
    @property
    def mint_config_tx(self) -> global___MintConfigTx: ...
    @property
    def signer_set(self) -> global___Ed25519SignerSet: ...
    def __init__(
        self,
        *,
        mint_config_tx: global___MintConfigTx | None = ...,
        signer_set: global___Ed25519SignerSet | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "mint_config_tx", b"mint_config_tx", "signer_set", b"signer_set"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "mint_config_tx", b"mint_config_tx", "signer_set", b"signer_set"
        ],
    ) -> None: ...

global___ValidatedMintConfigTx = ValidatedMintConfigTx

@typing_extensions.final
class UnmaskedAmount(google.protobuf.message.Message):
    """The amount and blinding factor of a TxOut"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TOKEN_ID_FIELD_NUMBER: builtins.int
    BLINDING_FIELD_NUMBER: builtins.int
    value: builtins.int
    """The value of the amount commitment"""
    token_id: builtins.int
    """The token_id of the amount commitment"""
    @property
    def blinding(self) -> global___CurveScalar:
        """The blinding factor of the amount commitment"""

    def __init__(
        self,
        *,
        value: builtins.int = ...,
        token_id: builtins.int = ...,
        blinding: global___CurveScalar | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["blinding", b"blinding"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "blinding", b"blinding", "token_id", b"token_id", "value", b"value"
        ],
    ) -> None: ...

global___UnmaskedAmount = UnmaskedAmount

@typing_extensions.final
class SignedContingentInput(google.protobuf.message.Message):
    """A pre-signed transaction input with associated rules, as described in MCIP #31"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_VERSION_FIELD_NUMBER: builtins.int
    TX_IN_FIELD_NUMBER: builtins.int
    MLSAG_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_AMOUNT_FIELD_NUMBER: builtins.int
    REQUIRED_OUTPUT_AMOUNTS_FIELD_NUMBER: builtins.int
    TX_OUT_GLOBAL_INDICES_FIELD_NUMBER: builtins.int
    block_version: builtins.int
    """The block version rules used when making this signature"""
    @property
    def tx_in(self) -> global___TxIn:
        """The tx_in which was signed"""

    @property
    def mlsag(self) -> global___RingMLSAG:
        """The Ring MLSAG signature, conferring spending authority"""

    @property
    def pseudo_output_amount(self) -> global___UnmaskedAmount:
        """The amount and blinding of the pseudo-output of the MLSAG"""

    @property
    def required_output_amounts(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___UnmaskedAmount
    ]:
        """/ The amount and blinding of any TxOut required by the input rules"""

    @property
    def tx_out_global_indices(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """/ The tx_out global index of each ring member
        / This helps the recipient of this payload construct proofs of membership for the ring
        """

    def __init__(
        self,
        *,
        block_version: builtins.int = ...,
        tx_in: global___TxIn | None = ...,
        mlsag: global___RingMLSAG | None = ...,
        pseudo_output_amount: global___UnmaskedAmount | None = ...,
        required_output_amounts: (
            collections.abc.Iterable[global___UnmaskedAmount] | None
        ) = ...,
        tx_out_global_indices: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "mlsag",
            b"mlsag",
            "pseudo_output_amount",
            b"pseudo_output_amount",
            "tx_in",
            b"tx_in",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "block_version",
            b"block_version",
            "mlsag",
            b"mlsag",
            "pseudo_output_amount",
            b"pseudo_output_amount",
            "required_output_amounts",
            b"required_output_amounts",
            "tx_in",
            b"tx_in",
            "tx_out_global_indices",
            b"tx_out_global_indices",
        ],
    ) -> None: ...

global___SignedContingentInput = SignedContingentInput

@typing_extensions.final
class Amount(google.protobuf.message.Message):
    """The amount of a Txout"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    TOKEN_ID_FIELD_NUMBER: builtins.int
    value: builtins.int
    """The value of the amount"""
    token_id: builtins.int
    """The token_id of the amount"""
    def __init__(
        self,
        *,
        value: builtins.int = ...,
        token_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "token_id", b"token_id", "value", b"value"
        ],
    ) -> None: ...

global___Amount = Amount

@typing_extensions.final
class OutputSecret(google.protobuf.message.Message):
    """/ The secrets corresponding to an output that we are trying to authorize
    / creation of
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AMOUNT_FIELD_NUMBER: builtins.int
    BLINDING_FIELD_NUMBER: builtins.int
    @property
    def amount(self) -> global___Amount:
        """/ The amount of the output we are creating"""

    @property
    def blinding(self) -> global___CurveScalar:
        """/ The blinding factor of the output we are creating"""

    def __init__(
        self,
        *,
        amount: global___Amount | None = ...,
        blinding: global___CurveScalar | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "amount", b"amount", "blinding", b"blinding"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "amount", b"amount", "blinding", b"blinding"
        ],
    ) -> None: ...

global___OutputSecret = OutputSecret

@typing_extensions.final
class InputSecret(google.protobuf.message.Message):
    """/ The secrets needed to create a signature that spends an existing output as
    / an input
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ONETIME_PRIVATE_KEY_FIELD_NUMBER: builtins.int
    SUBADDRESS_INDEX_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    BLINDING_FIELD_NUMBER: builtins.int
    @property
    def onetime_private_key(self) -> global___RistrettoPrivate: ...
    subaddress_index: builtins.int
    @property
    def amount(self) -> global___Amount:
        """/ The amount of the output we are spending"""

    @property
    def blinding(self) -> global___CurveScalar:
        """/ The blinding factor of the output we are spending"""

    def __init__(
        self,
        *,
        onetime_private_key: global___RistrettoPrivate | None = ...,
        subaddress_index: builtins.int = ...,
        amount: global___Amount | None = ...,
        blinding: global___CurveScalar | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "amount",
            b"amount",
            "blinding",
            b"blinding",
            "onetime_key_derive_data",
            b"onetime_key_derive_data",
            "onetime_private_key",
            b"onetime_private_key",
            "subaddress_index",
            b"subaddress_index",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "amount",
            b"amount",
            "blinding",
            b"blinding",
            "onetime_key_derive_data",
            b"onetime_key_derive_data",
            "onetime_private_key",
            b"onetime_private_key",
            "subaddress_index",
            b"subaddress_index",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "onetime_key_derive_data", b"onetime_key_derive_data"
        ],
    ) -> (
        typing_extensions.Literal["onetime_private_key", "subaddress_index"] | None
    ): ...

global___InputSecret = InputSecret

@typing_extensions.final
class ReducedTxOut(google.protobuf.message.Message):
    """/ A reduced representation of the TxOut's in the ring. For each ring
    / member we have only:
    / * The onetime-address (tx_out.target_key)
    / * The compressed commitment (tx_out.amount.commitment)
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    TARGET_KEY_FIELD_NUMBER: builtins.int
    COMMITMENT_FIELD_NUMBER: builtins.int
    @property
    def public_key(self) -> global___CompressedRistretto:
        """/ The tx_out.public_key field"""

    @property
    def target_key(self) -> global___CompressedRistretto:
        """/ The tx_out.target_key field"""

    @property
    def commitment(self) -> global___CompressedRistretto:
        """/ The tx_out.masked_amount.commitment field"""

    def __init__(
        self,
        *,
        public_key: global___CompressedRistretto | None = ...,
        target_key: global___CompressedRistretto | None = ...,
        commitment: global___CompressedRistretto | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "commitment",
            b"commitment",
            "public_key",
            b"public_key",
            "target_key",
            b"target_key",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "commitment",
            b"commitment",
            "public_key",
            b"public_key",
            "target_key",
            b"target_key",
        ],
    ) -> None: ...

global___ReducedTxOut = ReducedTxOut

@typing_extensions.final
class SignableInputRing(google.protobuf.message.Message):
    """/ A representation of the part of the input ring needed to create an MLSAG"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEMBERS_FIELD_NUMBER: builtins.int
    REAL_INPUT_INDEX_FIELD_NUMBER: builtins.int
    INPUT_SECRET_FIELD_NUMBER: builtins.int
    @property
    def members(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___ReducedTxOut
    ]:
        """/ A reduced representation of the TxOut's in the ring."""
    real_input_index: builtins.int
    """/ The index of the TxOut in the ring that we are spending"""
    @property
    def input_secret(self) -> global___InputSecret:
        """/ The secrets needed to sign that input"""

    def __init__(
        self,
        *,
        members: collections.abc.Iterable[global___ReducedTxOut] | None = ...,
        real_input_index: builtins.int = ...,
        input_secret: global___InputSecret | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["input_secret", b"input_secret"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "input_secret",
            b"input_secret",
            "members",
            b"members",
            "real_input_index",
            b"real_input_index",
        ],
    ) -> None: ...

global___SignableInputRing = SignableInputRing

@typing_extensions.final
class PresignedInputRing(google.protobuf.message.Message):
    """/ A presigned RingMLSAG and ancillary data needed to incorporate it into a
    / signature
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MLSAG_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_SECRET_FIELD_NUMBER: builtins.int
    @property
    def mlsag(self) -> global___RingMLSAG:
        """/ The mlsag signature authorizing the spending of an input"""

    @property
    def pseudo_output_secret(self) -> global___OutputSecret:
        """/ The amount and blinding factor of the pseudo output"""

    def __init__(
        self,
        *,
        mlsag: global___RingMLSAG | None = ...,
        pseudo_output_secret: global___OutputSecret | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "mlsag", b"mlsag", "pseudo_output_secret", b"pseudo_output_secret"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "mlsag", b"mlsag", "pseudo_output_secret", b"pseudo_output_secret"
        ],
    ) -> None: ...

global___PresignedInputRing = PresignedInputRing

@typing_extensions.final
class InputRing(google.protobuf.message.Message):
    """/ An enum which is either a PresignedInputRing or a SignableInputRing"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNABLE_FIELD_NUMBER: builtins.int
    PRESIGNED_FIELD_NUMBER: builtins.int
    @property
    def signable(self) -> global___SignableInputRing: ...
    @property
    def presigned(self) -> global___PresignedInputRing: ...
    def __init__(
        self,
        *,
        signable: global___SignableInputRing | None = ...,
        presigned: global___PresignedInputRing | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "presigned", b"presigned", "ring", b"ring", "signable", b"signable"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "presigned", b"presigned", "ring", b"ring", "signable", b"signable"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ring", b"ring"]
    ) -> typing_extensions.Literal["signable", "presigned"] | None: ...

global___InputRing = InputRing

@typing_extensions.final
class UnsignedTx(google.protobuf.message.Message):
    """/ A structure containing an unsigned transaction, together with the data
    / required to sign it that does not involve the spend private key.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TX_PREFIX_FIELD_NUMBER: builtins.int
    RINGS_FIELD_NUMBER: builtins.int
    BLOCK_VERSION_FIELD_NUMBER: builtins.int
    TX_OUT_UNBLINDING_DATA_FIELD_NUMBER: builtins.int
    @property
    def tx_prefix(self) -> global___TxPrefix:
        """/ The fully constructed TxPrefix."""

    @property
    def rings(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___InputRing
    ]:
        """/ A "ring" of transaction outputs."""
    block_version: builtins.int
    """/ The block version that this transaction is valid for."""
    @property
    def tx_out_unblinding_data(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___TxOutSummaryUnblindingData
    ]:
        """/ The unblinding data for each of the outputs we are creating.
        / This also contains the output secrets needed for building the signature.
        / (Those were previously at tag value 3)
        """

    def __init__(
        self,
        *,
        tx_prefix: global___TxPrefix | None = ...,
        rings: collections.abc.Iterable[global___InputRing] | None = ...,
        block_version: builtins.int = ...,
        tx_out_unblinding_data: (
            collections.abc.Iterable[global___TxOutSummaryUnblindingData] | None
        ) = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["tx_prefix", b"tx_prefix"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "block_version",
            b"block_version",
            "rings",
            b"rings",
            "tx_out_unblinding_data",
            b"tx_out_unblinding_data",
            "tx_prefix",
            b"tx_prefix",
        ],
    ) -> None: ...

global___UnsignedTx = UnsignedTx

@typing_extensions.final
class TxOutSummaryUnblindingData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UNMASKED_AMOUNT_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    TX_PRIVATE_KEY_FIELD_NUMBER: builtins.int
    @property
    def unmasked_amount(self) -> global___UnmaskedAmount:
        """/ An unmasked amount, corresponding to the MaskedAmount field
        / The block version appears in the TxSummaryUnblindingData.
        """

    @property
    def address(self) -> global___PublicAddress:
        """/ The public address to which this TxOut is addressed.
        / If this output comes from an SCI then we may not know the public
        / address.
        """

    @property
    def tx_private_key(self) -> global___RistrettoPrivate:
        """/ The tx_private_key generated for this TxOut. This is an entropy source
        / which introduces randomness into the cryptonote stealth addresses
        / (tx_public_key and tx_target_key) of the TxOut.
        /
        / If this output comes from an SCI then we may not know this.
        """

    def __init__(
        self,
        *,
        unmasked_amount: global___UnmaskedAmount | None = ...,
        address: global___PublicAddress | None = ...,
        tx_private_key: global___RistrettoPrivate | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "address",
            b"address",
            "tx_private_key",
            b"tx_private_key",
            "unmasked_amount",
            b"unmasked_amount",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "address",
            b"address",
            "tx_private_key",
            b"tx_private_key",
            "unmasked_amount",
            b"unmasked_amount",
        ],
    ) -> None: ...

global___TxOutSummaryUnblindingData = TxOutSummaryUnblindingData

@typing_extensions.final
class SigningData(google.protobuf.message.Message):
    """/ A structure that contains all the data required to sign a transaction that
    / does not rely on having the spend private key.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MLSAG_SIGNING_DIGEST_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_BLINDINGS_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_COMMITMENTS_FIELD_NUMBER: builtins.int
    RANGE_PROOF_BYTES_FIELD_NUMBER: builtins.int
    RANGE_PROOFS_FIELD_NUMBER: builtins.int
    PSEUDO_OUTPUT_TOKEN_IDS_FIELD_NUMBER: builtins.int
    OUTPUT_TOKEN_IDS_FIELD_NUMBER: builtins.int
    mlsag_signing_digest: builtins.bytes
    """/ The bytes actually signed by MLSAG signatures.
    / This is different depending on what block version we are in.
    / * In the oldest block versions, this is a large number of bytes called the
    /   "extended message", which includes a tx prefix as well as the pseudo output commitments.
    / * In block version 2, this is instead 32 bytes called the "extended message digest".
    / * In block version 3, this is instead 32 bytes called the "extended-message-and-tx-summary digest".
    /
    / Note that SCI's are the exception to this, they sign the digest based on their TxIn instead,
    / see MCIP #31 for more on that. Everything that isn't an SCI signs this.
    """
    @property
    def pseudo_output_blindings(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___CurveScalar
    ]:
        """/ The actual pseudo output commitments use the blindings from
        / `pseudo_output_blinding` and not the original true input.
        """

    @property
    def pseudo_output_commitments(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___CompressedRistretto
    ]:
        """/ Commitments of value equal to each real input."""
    range_proof_bytes: builtins.bytes
    """/ Before mixed transactions feature, there is one range proof for all pseudo-output
    / and output commitments, whose serialized bytes appear here.
    / After mixed transactions feature, this field is empty.
    """
    @property
    def range_proofs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.bytes
    ]:
        """/ Before mixed transactions feature, this field is empty.
        / After mixed transactions feature, this field contains one range proof for each
        / token id which appears in the transaction, in sorted order of token ids.
        / It range-proofs the pseudo-outputs and outputs with that token id, in the order
        / that they appear in the transaction.
        """

    @property
    def pseudo_output_token_ids(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """/ The token ids of each pseudo ouptut. There must be one of these for each TxIn.
        / Before mixed transactions feature, this field is empty, and the token ids of
        / all pseudo-outputs are inferred from the tx.prefix.fee_token_id.
        """

    @property
    def output_token_ids(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """/ The token ids of each output. There must be one of these for each output of the Tx.
        / (tx.prefix.outputs).
        / Before mixed transactions feature, this field is empty, and the token ids of
        / all outputs are inferred from the tx.prefix.fee_token_id.
        """

    def __init__(
        self,
        *,
        mlsag_signing_digest: builtins.bytes = ...,
        pseudo_output_blindings: (
            collections.abc.Iterable[global___CurveScalar] | None
        ) = ...,
        pseudo_output_commitments: (
            collections.abc.Iterable[global___CompressedRistretto] | None
        ) = ...,
        range_proof_bytes: builtins.bytes = ...,
        range_proofs: collections.abc.Iterable[builtins.bytes] | None = ...,
        pseudo_output_token_ids: collections.abc.Iterable[builtins.int] | None = ...,
        output_token_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "mlsag_signing_digest",
            b"mlsag_signing_digest",
            "output_token_ids",
            b"output_token_ids",
            "pseudo_output_blindings",
            b"pseudo_output_blindings",
            "pseudo_output_commitments",
            b"pseudo_output_commitments",
            "pseudo_output_token_ids",
            b"pseudo_output_token_ids",
            "range_proof_bytes",
            b"range_proof_bytes",
            "range_proofs",
            b"range_proofs",
        ],
    ) -> None: ...

global___SigningData = SigningData
